{
  "version": 3,
  "sources": ["../../../../../node_modules/@google-pay/button-angular/fesm2020/google-pay-button-angular.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { Directive, Input, NgModule } from '@angular/core';\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Keeps track scripts that have been requested by loadScript.\n */\nlet cachedScripts = {};\n/**\n * Asynchronously loads a script keeping track of which scripts have already\n * requested and loaded.\n *\n * Multiple requests to the same resource will return the same promise.\n *\n * @param src Script URL to load\n */\nfunction loadScript(src) {\n  const existing = cachedScripts[src];\n  if (existing) {\n    return existing;\n  }\n  const promise = new Promise((resolve, reject) => {\n    // Create script\n    const script = document.createElement('script');\n    script.src = src;\n    script.async = true;\n    // Script event listener callbacks for load and error\n    const onScriptLoad = () => {\n      resolve();\n    };\n    const onScriptError = () => {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      cleanup();\n      // Remove from cachedScripts so that we can try loading again\n      delete cachedScripts[src];\n      script.remove();\n      reject(new Error(`Unable to load script ${src}`));\n    };\n    script.addEventListener('load', onScriptLoad);\n    script.addEventListener('error', onScriptError);\n    // Add script to document body\n    document.body.appendChild(script);\n    // Remove event listeners on cleanup\n    function cleanup() {\n      script.removeEventListener('load', onScriptLoad);\n      script.removeEventListener('error', onScriptError);\n    }\n  });\n  cachedScripts[src] = promise;\n  return promise;\n}\n/**\n * Clears the script cache. Used for testing purposes only.\n */\nfunction clearScriptCache() {\n  cachedScripts = {};\n}\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable react/no-is-mounted */\n/**\n * Manages the lifecycle of the Google Pay button.\n *\n * Includes lifecycle management of the `PaymentsClient` instance,\n * `isReadyToPay`, `onClick`, `loadPaymentData`, and other callback methods.\n */\nclass ButtonManager {\n  constructor(options) {\n    /**\n     * Handles the click event of the Google Pay button.\n     *\n     * This method would normally be private but has been made public for\n     * testing purposes.\n     *\n     * @private\n     */\n    this.handleClick = async event => {\n      const config = this.config;\n      if (!config) {\n        throw new Error('google-pay-button: Missing configuration');\n      }\n      const request = this.createLoadPaymentDataRequest(config);\n      try {\n        if (config.onClick) {\n          config.onClick(event);\n        }\n        if (event.defaultPrevented) {\n          return;\n        }\n        const result = await this.client.loadPaymentData(request);\n        if (config.onLoadPaymentData) {\n          config.onLoadPaymentData(result);\n        }\n      } catch (err) {\n        if (err.statusCode === 'CANCELED') {\n          if (config.onCancel) {\n            config.onCancel(err);\n          }\n        } else if (config.onError) {\n          config.onError(err);\n        } else {\n          console.error(err);\n        }\n      }\n    };\n    this.options = options;\n  }\n  getElement() {\n    return this.element;\n  }\n  isGooglePayLoaded() {\n    return 'google' in (window || global) && !!google?.payments?.api?.PaymentsClient;\n  }\n  async mount(element) {\n    if (!this.isGooglePayLoaded()) {\n      try {\n        await loadScript('https://pay.google.com/gp/p/js/pay.js');\n      } catch (err) {\n        if (this.config?.onError) {\n          this.config.onError(err);\n        } else {\n          console.error(err);\n        }\n        return;\n      }\n    }\n    this.element = element;\n    if (element) {\n      this.appendStyles();\n      if (this.config) {\n        this.updateElement();\n      }\n    }\n  }\n  unmount() {\n    this.element = undefined;\n  }\n  configure(newConfig) {\n    let promise = undefined;\n    this.config = newConfig;\n    if (!this.oldInvalidationValues || this.isClientInvalidated(newConfig)) {\n      promise = this.updateElement();\n    }\n    this.oldInvalidationValues = this.getInvalidationValues(newConfig);\n    return promise ?? Promise.resolve();\n  }\n  /**\n   * Creates client configuration options based on button configuration\n   * options.\n   *\n   * This method would normally be private but has been made public for\n   * testing purposes.\n   *\n   * @private\n   */\n  createClientOptions(config) {\n    const clientConfig = {\n      environment: config.environment,\n      merchantInfo: this.createMerchantInfo(config)\n    };\n    if (config.onPaymentDataChanged || config.onPaymentAuthorized) {\n      clientConfig.paymentDataCallbacks = {};\n      if (config.onPaymentDataChanged) {\n        // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n        clientConfig.paymentDataCallbacks.onPaymentDataChanged = paymentData => {\n          const result = config.onPaymentDataChanged(paymentData);\n          return result || {};\n        };\n      }\n      if (config.onPaymentAuthorized) {\n        // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n        clientConfig.paymentDataCallbacks.onPaymentAuthorized = paymentData => {\n          const result = config.onPaymentAuthorized(paymentData);\n          return result || {};\n        };\n      }\n    }\n    return clientConfig;\n  }\n  createIsReadyToPayRequest(config) {\n    const paymentRequest = config.paymentRequest;\n    const request = {\n      apiVersion: paymentRequest.apiVersion,\n      apiVersionMinor: paymentRequest.apiVersionMinor,\n      allowedPaymentMethods: paymentRequest.allowedPaymentMethods,\n      existingPaymentMethodRequired: config.existingPaymentMethodRequired\n    };\n    return request;\n  }\n  /**\n   * Constructs `loadPaymentData` request object based on button configuration.\n   *\n   * It infers request properties like `shippingAddressRequired`,\n   * `shippingOptionRequired`, and `billingAddressRequired` if not already set\n   * based on the presence of their associated options and parameters. It also\n   * infers `callbackIntents` based on the callback methods defined in button\n   * configuration.\n   *\n   * This method would normally be private but has been made public for\n   * testing purposes.\n   *\n   * @private\n   */\n  createLoadPaymentDataRequest(config) {\n    const request = {\n      ...config.paymentRequest,\n      merchantInfo: this.createMerchantInfo(config)\n    };\n    // TODO: #13 re-enable inferrence if/when we agree as a team\n    return request;\n  }\n  createMerchantInfo(config) {\n    const merchantInfo = {\n      ...config.paymentRequest.merchantInfo\n    };\n    // apply softwareInfo if not set\n    if (!merchantInfo.softwareInfo) {\n      merchantInfo.softwareInfo = {\n        id: this.options.softwareInfoId,\n        version: this.options.softwareInfoVersion\n      };\n    }\n    return merchantInfo;\n  }\n  isMounted() {\n    return this.element != null && this.element.isConnected !== false;\n  }\n  removeButton() {\n    if (this.element instanceof ShadowRoot || this.element instanceof Element) {\n      for (const child of Array.from(this.element.children)) {\n        if (child.tagName !== 'STYLE') {\n          child.remove();\n        }\n      }\n    }\n  }\n  async updateElement() {\n    if (!this.isMounted()) return;\n    const element = this.getElement();\n    if (!this.config) {\n      throw new Error('google-pay-button: Missing configuration');\n    }\n    // remove existing button\n    this.removeButton();\n    try {\n      this.client = new google.payments.api.PaymentsClient(this.createClientOptions(this.config));\n    } catch (err) {\n      if (this.config.onError) {\n        this.config.onError(err);\n      } else {\n        console.error(err);\n      }\n      return;\n    }\n    const buttonOptions = {\n      buttonType: this.config.buttonType,\n      buttonColor: this.config.buttonColor,\n      buttonRadius: this.config.buttonRadius,\n      buttonSizeMode: this.config.buttonSizeMode,\n      buttonLocale: this.config.buttonLocale,\n      onClick: this.handleClick,\n      allowedPaymentMethods: this.config.paymentRequest.allowedPaymentMethods\n    };\n    const rootNode = element.getRootNode();\n    if (rootNode instanceof ShadowRoot) {\n      buttonOptions.buttonRootNode = rootNode;\n    }\n    // pre-create button\n    const button = this.client.createButton(buttonOptions);\n    this.setClassName(element, [element.className, 'not-ready']);\n    element.appendChild(button);\n    let showButton = false;\n    let readyToPay;\n    try {\n      readyToPay = await this.client.isReadyToPay(this.createIsReadyToPayRequest(this.config));\n      showButton = readyToPay.result && !this.config.existingPaymentMethodRequired || readyToPay.result && readyToPay.paymentMethodPresent && this.config.existingPaymentMethodRequired || false;\n    } catch (err) {\n      if (this.config.onError) {\n        this.config.onError(err);\n      } else {\n        console.error(err);\n      }\n    }\n    if (!this.isMounted()) return;\n    if (showButton) {\n      try {\n        this.client.prefetchPaymentData(this.createLoadPaymentDataRequest(this.config));\n      } catch (err) {\n        console.log('Error with prefetch', err);\n      }\n      // remove hidden className\n      this.setClassName(element, (element.className || '').split(' ').filter(className => className && className !== 'not-ready'));\n    }\n    if (this.isReadyToPay !== readyToPay?.result || this.paymentMethodPresent !== readyToPay?.paymentMethodPresent) {\n      this.isReadyToPay = !!readyToPay?.result;\n      this.paymentMethodPresent = readyToPay?.paymentMethodPresent;\n      if (this.config.onReadyToPayChange) {\n        const readyToPayResponse = {\n          isButtonVisible: showButton,\n          isReadyToPay: this.isReadyToPay\n        };\n        if (this.paymentMethodPresent) {\n          readyToPayResponse.paymentMethodPresent = this.paymentMethodPresent;\n        }\n        this.config.onReadyToPayChange(readyToPayResponse);\n      }\n    }\n  }\n  setClassName(element, classNames) {\n    const className = classNames.filter(name => name).join(' ');\n    if (className) {\n      element.className = className;\n    } else {\n      element.removeAttribute('class');\n    }\n  }\n  appendStyles() {\n    if (typeof document === 'undefined') return;\n    const rootNode = this.element?.getRootNode();\n    const styleId = `default-google-style-${this.options.cssSelector.replace(/[^\\w-]+/g, '')}-${this.config?.buttonLocale}`;\n    // initialize styles if rendering on the client:\n    if (rootNode) {\n      if (!rootNode.getElementById?.(styleId)) {\n        const style = document.createElement('style');\n        style.id = styleId;\n        style.type = 'text/css';\n        style.innerHTML = `\n          ${this.options.cssSelector} {\n            display: inline-block;\n          }\n          ${this.options.cssSelector}.not-ready {\n            width: 0;\n            height: 0;\n            overflow: hidden;\n          }\n        `;\n        if (rootNode instanceof Document && rootNode.head) {\n          rootNode.head.appendChild(style);\n        } else {\n          rootNode.appendChild(style);\n        }\n      }\n    }\n  }\n  isClientInvalidated(newConfig) {\n    if (!this.oldInvalidationValues) return true;\n    const newValues = this.getInvalidationValues(newConfig);\n    return newValues.some((value, index) => JSON.stringify(value) !== JSON.stringify(this.oldInvalidationValues[index]));\n  }\n  getInvalidationValues(config) {\n    return [config.environment, config.existingPaymentMethodRequired, !!config.onPaymentDataChanged, !!config.onPaymentAuthorized, config.buttonType, config.buttonColor, config.buttonRadius, config.buttonLocale, config.buttonSizeMode, config.paymentRequest.merchantInfo.merchantId, config.paymentRequest.merchantInfo.merchantName, config.paymentRequest.merchantInfo.softwareInfo?.id, config.paymentRequest.merchantInfo.softwareInfo?.version, config.paymentRequest.allowedPaymentMethods];\n  }\n}\nvar name = \"@google-pay/button-angular\";\nvar version = \"3.1.0\";\nvar description = \"Angular component for Google Pay button\";\nvar repository = {\n  type: \"git\",\n  url: \"https://github.com/google-pay/google-pay-button\",\n  directory: \"src/button-angular\"\n};\nvar homepage = \"https://github.com/google-pay/google-pay-button/tree/main/src/button-angular#readme\";\nvar engines = {\n  node: \">=8.0.0\"\n};\nvar author = \"socsieng@google.com\";\nvar license = \"Apache-2.0\";\nvar scripts = {\n  build: \"ng build --configuration production\"\n};\nvar dependencies = {\n  \"@types/googlepay\": \"^0.7.0\"\n};\nvar peerDependencies = {\n  \"@angular/core\": \">=8.0.0\",\n  \"@types/googlepay\": \"^0.7.0\"\n};\nvar files = [\"esm2020/*\", \"fesm2015/*\", \"fesm2020/*\", \"lib/*\", \"button-angular/*\", \"google-pay-button-angular.*\", \"*.d.ts\", \"*.json\", \"README.md\"];\nvar keywords = [\"googlepay\", \"google-pay\", \"google-pay-button\", \"button\", \"angular\"];\nvar devDependencies = {\n  \"@angular-devkit/build-ng-packagr\": \"^0.1002.0\",\n  \"@angular/core\": \"^10.2.2\",\n  \"ng-packagr\": \"^10.1.2\"\n};\nvar _package = {\n  name: name,\n  version: version,\n  description: description,\n  repository: repository,\n  homepage: homepage,\n  engines: engines,\n  author: author,\n  license: license,\n  scripts: scripts,\n  dependencies: dependencies,\n  peerDependencies: peerDependencies,\n  files: files,\n  keywords: keywords,\n  devDependencies: devDependencies\n};\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns a new function that delays invocations to the original function\n * within a specified wait period. The last invocation within this time period\n * gets invoked. All earlier invocations are ignore.\n *\n * @param func The function to invoke.\n * @param wait The time in milliseconds to wait for idle invocations.\n */\nfunction debounce(func, wait = 0) {\n  let timeout;\n  return function (...args) {\n    window.clearTimeout(timeout);\n    const later = function () {\n      timeout = undefined;\n      return func(...args);\n    };\n    return new Promise(resolve => {\n      timeout = window.setTimeout(() => {\n        const result = later();\n        resolve(result);\n      }, wait);\n    });\n  };\n}\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass GooglePayButtonComponent {\n  constructor(elementRef) {\n    this.elementRef = elementRef;\n    this.manager = new ButtonManager({\n      cssSelector: 'google-pay-button',\n      softwareInfoId: name,\n      softwareInfoVersion: version\n    });\n    this.initializeButton = debounce(() => {\n      if (!this.assertRequiredProperty('paymentRequest')) {\n        return;\n      }\n      if (!this.assertRequiredProperty('environment')) {\n        return;\n      }\n      const config = {\n        paymentRequest: this.paymentRequest,\n        environment: this.environment,\n        existingPaymentMethodRequired: this.existingPaymentMethodRequired,\n        onPaymentDataChanged: this.paymentDataChangedCallback,\n        onPaymentAuthorized: this.paymentAuthorizedCallback,\n        buttonColor: this.buttonColor,\n        buttonType: this.buttonType,\n        buttonRadius: this.buttonRadius,\n        buttonSizeMode: this.buttonSizeMode,\n        buttonLocale: this.buttonLocale,\n        onReadyToPayChange: result => {\n          if (this.readyToPayChangeCallback) {\n            this.readyToPayChangeCallback(result);\n          }\n          this.dispatch('readytopaychange', result);\n        },\n        onCancel: reason => {\n          if (this.cancelCallback) {\n            this.cancelCallback(reason);\n          }\n          this.dispatch('cancel', reason);\n        },\n        onError: error => {\n          if (this.errorCallback) {\n            this.errorCallback?.(error);\n          }\n          this.elementRef.nativeElement.dispatchEvent(new ErrorEvent('error', {\n            error\n          }));\n        },\n        onLoadPaymentData: paymentData => {\n          if (this.loadPaymentDataCallback) {\n            this.loadPaymentDataCallback(paymentData);\n          }\n          this.dispatch('loadpaymentdata', paymentData);\n        },\n        onClick: event => {\n          if (this.clickCallback) {\n            this.clickCallback?.(event);\n          }\n        }\n      };\n      this.manager.configure(config);\n    });\n  }\n  get isReadyToPay() {\n    return this.manager.isReadyToPay;\n  }\n  ngOnInit() {\n    return this.manager.mount(this.elementRef.nativeElement);\n  }\n  ngOnChanges() {\n    return this.initializeButton();\n  }\n  assertRequiredProperty(name) {\n    const value = this[name];\n    if (value === null || value === undefined) {\n      this.throwError(Error(`Required property not set: ${name}`));\n      return false;\n    }\n    return true;\n  }\n  /**\n   * Throws an error.\n   *\n   * Used for testing purposes so that the method can be spied on.\n   */\n  throwError(error) {\n    throw error;\n  }\n  dispatch(type, detail) {\n    this.elementRef.nativeElement.dispatchEvent(new CustomEvent(type, {\n      bubbles: true,\n      cancelable: false,\n      detail\n    }));\n  }\n}\nGooglePayButtonComponent.ɵfac = function GooglePayButtonComponent_Factory(t) {\n  return new (t || GooglePayButtonComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\nGooglePayButtonComponent.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: GooglePayButtonComponent,\n  selectors: [[\"google-pay-button\"]],\n  inputs: {\n    paymentRequest: \"paymentRequest\",\n    environment: \"environment\",\n    existingPaymentMethodRequired: \"existingPaymentMethodRequired\",\n    buttonColor: \"buttonColor\",\n    buttonType: \"buttonType\",\n    buttonRadius: \"buttonRadius\",\n    buttonSizeMode: \"buttonSizeMode\",\n    buttonLocale: \"buttonLocale\",\n    paymentDataChangedCallback: \"paymentDataChangedCallback\",\n    paymentAuthorizedCallback: \"paymentAuthorizedCallback\",\n    readyToPayChangeCallback: \"readyToPayChangeCallback\",\n    loadPaymentDataCallback: \"loadPaymentDataCallback\",\n    cancelCallback: \"cancelCallback\",\n    errorCallback: \"errorCallback\",\n    clickCallback: \"clickCallback\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GooglePayButtonComponent, [{\n    type: Directive,\n    args: [{\n      selector: 'google-pay-button'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    paymentRequest: [{\n      type: Input\n    }],\n    environment: [{\n      type: Input\n    }],\n    existingPaymentMethodRequired: [{\n      type: Input\n    }],\n    buttonColor: [{\n      type: Input\n    }],\n    buttonType: [{\n      type: Input\n    }],\n    buttonRadius: [{\n      type: Input\n    }],\n    buttonSizeMode: [{\n      type: Input\n    }],\n    buttonLocale: [{\n      type: Input\n    }],\n    paymentDataChangedCallback: [{\n      type: Input\n    }],\n    paymentAuthorizedCallback: [{\n      type: Input\n    }],\n    readyToPayChangeCallback: [{\n      type: Input\n    }],\n    loadPaymentDataCallback: [{\n      type: Input\n    }],\n    cancelCallback: [{\n      type: Input\n    }],\n    errorCallback: [{\n      type: Input\n    }],\n    clickCallback: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass GooglePayButtonModule {}\nGooglePayButtonModule.ɵfac = function GooglePayButtonModule_Factory(t) {\n  return new (t || GooglePayButtonModule)();\n};\nGooglePayButtonModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: GooglePayButtonModule,\n  declarations: [GooglePayButtonComponent],\n  exports: [GooglePayButtonComponent]\n});\nGooglePayButtonModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GooglePayButtonModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [GooglePayButtonComponent],\n      imports: [],\n      exports: [GooglePayButtonComponent]\n    }]\n  }], null, null);\n})();\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*\n * Public API Surface of google-pay-button\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { GooglePayButtonComponent, GooglePayButtonModule };\n"],
  "mappings": "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",
  "names": ["name", "name"]
}
