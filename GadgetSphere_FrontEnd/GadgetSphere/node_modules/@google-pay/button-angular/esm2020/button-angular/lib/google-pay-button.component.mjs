/**
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ButtonManager } from '../../lib/button-manager';
import { Directive, Input } from '@angular/core';
import { name as softwareId, version as softwareVersion } from '../package.json';
import { debounce } from '../../lib/debounce';
import * as i0 from "@angular/core";
export class GooglePayButtonComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.manager = new ButtonManager({
            cssSelector: 'google-pay-button',
            softwareInfoId: softwareId,
            softwareInfoVersion: softwareVersion,
        });
        this.initializeButton = debounce(() => {
            if (!this.assertRequiredProperty('paymentRequest')) {
                return;
            }
            if (!this.assertRequiredProperty('environment')) {
                return;
            }
            const config = {
                paymentRequest: this.paymentRequest,
                environment: this.environment,
                existingPaymentMethodRequired: this.existingPaymentMethodRequired,
                onPaymentDataChanged: this.paymentDataChangedCallback,
                onPaymentAuthorized: this.paymentAuthorizedCallback,
                buttonColor: this.buttonColor,
                buttonType: this.buttonType,
                buttonRadius: this.buttonRadius,
                buttonSizeMode: this.buttonSizeMode,
                buttonLocale: this.buttonLocale,
                onReadyToPayChange: result => {
                    if (this.readyToPayChangeCallback) {
                        this.readyToPayChangeCallback(result);
                    }
                    this.dispatch('readytopaychange', result);
                },
                onCancel: reason => {
                    if (this.cancelCallback) {
                        this.cancelCallback(reason);
                    }
                    this.dispatch('cancel', reason);
                },
                onError: error => {
                    if (this.errorCallback) {
                        this.errorCallback?.(error);
                    }
                    this.elementRef.nativeElement.dispatchEvent(new ErrorEvent('error', { error }));
                },
                onLoadPaymentData: paymentData => {
                    if (this.loadPaymentDataCallback) {
                        this.loadPaymentDataCallback(paymentData);
                    }
                    this.dispatch('loadpaymentdata', paymentData);
                },
                onClick: event => {
                    if (this.clickCallback) {
                        this.clickCallback?.(event);
                    }
                },
            };
            this.manager.configure(config);
        });
    }
    get isReadyToPay() {
        return this.manager.isReadyToPay;
    }
    ngOnInit() {
        return this.manager.mount(this.elementRef.nativeElement);
    }
    ngOnChanges() {
        return this.initializeButton();
    }
    assertRequiredProperty(name) {
        const value = this[name];
        if (value === null || value === undefined) {
            this.throwError(Error(`Required property not set: ${name}`));
            return false;
        }
        return true;
    }
    /**
     * Throws an error.
     *
     * Used for testing purposes so that the method can be spied on.
     */
    throwError(error) {
        throw error;
    }
    dispatch(type, detail) {
        this.elementRef.nativeElement.dispatchEvent(new CustomEvent(type, {
            bubbles: true,
            cancelable: false,
            detail,
        }));
    }
}
GooglePayButtonComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: GooglePayButtonComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
GooglePayButtonComponent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.10", type: GooglePayButtonComponent, selector: "google-pay-button", inputs: { paymentRequest: "paymentRequest", environment: "environment", existingPaymentMethodRequired: "existingPaymentMethodRequired", buttonColor: "buttonColor", buttonType: "buttonType", buttonRadius: "buttonRadius", buttonSizeMode: "buttonSizeMode", buttonLocale: "buttonLocale", paymentDataChangedCallback: "paymentDataChangedCallback", paymentAuthorizedCallback: "paymentAuthorizedCallback", readyToPayChangeCallback: "readyToPayChangeCallback", loadPaymentDataCallback: "loadPaymentDataCallback", cancelCallback: "cancelCallback", errorCallback: "errorCallback", clickCallback: "clickCallback" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: GooglePayButtonComponent, decorators: [{
            type: Directive,
            args: [{
                    selector: 'google-pay-button',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { paymentRequest: [{
                type: Input
            }], environment: [{
                type: Input
            }], existingPaymentMethodRequired: [{
                type: Input
            }], buttonColor: [{
                type: Input
            }], buttonType: [{
                type: Input
            }], buttonRadius: [{
                type: Input
            }], buttonSizeMode: [{
                type: Input
            }], buttonLocale: [{
                type: Input
            }], paymentDataChangedCallback: [{
                type: Input
            }], paymentAuthorizedCallback: [{
                type: Input
            }], readyToPayChangeCallback: [{
                type: Input
            }], loadPaymentDataCallback: [{
                type: Input
            }], cancelCallback: [{
                type: Input
            }], errorCallback: [{
                type: Input
            }], clickCallback: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29vZ2xlLXBheS1idXR0b24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vbGliL2dvb2dsZS1wYXktYnV0dG9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7R0FjRztBQUVILE9BQU8sRUFBRSxhQUFhLEVBQVUsTUFBTSwwQkFBMEIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsU0FBUyxFQUFjLEtBQUssRUFBcUIsTUFBTSxlQUFlLENBQUM7QUFDaEYsT0FBTyxFQUFFLElBQUksSUFBSSxVQUFVLEVBQUUsT0FBTyxJQUFJLGVBQWUsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2pGLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7QUFLOUMsTUFBTSxPQUFPLHdCQUF3QjtJQXVCbkMsWUFBb0IsVUFBc0I7UUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQXRCbEMsWUFBTyxHQUFHLElBQUksYUFBYSxDQUFDO1lBQ2xDLFdBQVcsRUFBRSxtQkFBbUI7WUFDaEMsY0FBYyxFQUFFLFVBQVU7WUFDMUIsbUJBQW1CLEVBQUUsZUFBZTtTQUNyQyxDQUFDLENBQUM7UUFnQ0sscUJBQWdCLEdBQUcsUUFBUSxDQUFDLEdBQUcsRUFBRTtZQUN2QyxJQUFJLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLGdCQUFnQixDQUFDLEVBQUU7Z0JBQ2xELE9BQU87YUFDUjtZQUVELElBQUksQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsYUFBYSxDQUFDLEVBQUU7Z0JBQy9DLE9BQU87YUFDUjtZQUVELE1BQU0sTUFBTSxHQUFXO2dCQUNyQixjQUFjLEVBQUUsSUFBSSxDQUFDLGNBQWM7Z0JBQ25DLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVztnQkFDN0IsNkJBQTZCLEVBQUUsSUFBSSxDQUFDLDZCQUE2QjtnQkFDakUsb0JBQW9CLEVBQUUsSUFBSSxDQUFDLDBC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QUksV0FBVyxDQUFDLElBQUksRUFBRTtZQUNwQixPQUFPLEVBQUUsSUFBSTtZQUNiLFVBQVUsRUFBRSxLQUFLO1lBQ2pCLE1BQU07U0FDUCxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7O3NIQXRIVSx3QkFBd0I7MEdBQXhCLHdCQUF3Qjs0RkFBeEIsd0JBQXdCO2tCQUhwQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxtQkFBbUI7aUJBQzlCO2lHQVFVLGNBQWM7c0JBQXRCLEtBQUs7Z0JBQ0csV0FBVztzQkFBbkIsS0FBSztnQkFDRyw2QkFBNkI7c0JBQXJDLEtBQUs7Z0JBQ0csV0FBVztzQkFBbkIsS0FBSztnQkFDRyxVQUFVO3NCQUFsQixLQUFLO2dCQUNHLFlBQVk7c0JBQXBCLEtBQUs7Z0JBQ0csY0FBYztzQkFBdEIsS0FBSztnQkFDRyxZQUFZO3NCQUFwQixLQUFLO2dCQUNHLDBCQUEwQjtzQkFBbEMsS0FBSztnQkFDRyx5QkFBeUI7c0JBQWpDLEtBQUs7Z0JBQ0csd0JBQXdCO3NCQUFoQyxLQUFLO2dCQUNHLHVCQUF1QjtzQkFBL0IsS0FBSztnQkFDRyxjQUFjO3NCQUF0QixLQUFLO2dCQUNHLGFBQWE7c0JBQXJCLEtBQUs7Z0JBQ0csYUFBYTtzQkFBckIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgQnV0dG9uTWFuYWdlciwgQ29uZmlnIH0gZnJvbSAnLi4vLi4vbGliL2J1dHRvbi1tYW5hZ2VyJztcbmltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5wdXQsIE9uQ2hhbmdlcywgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBuYW1lIGFzIHNvZnR3YXJlSWQsIHZlcnNpb24gYXMgc29mdHdhcmVWZXJzaW9uIH0gZnJvbSAnLi4vcGFja2FnZS5qc29uJztcbmltcG9ydCB7IGRlYm91bmNlIH0gZnJvbSAnLi4vLi4vbGliL2RlYm91bmNlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnZ29vZ2xlLXBheS1idXR0b24nLFxufSlcbmV4cG9ydCBjbGFzcyBHb29nbGVQYXlCdXR0b25Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG4gIHByaXZhdGUgbWFuYWdlciA9IG5ldyBCdXR0b25NYW5hZ2VyKHtcbiAgICBjc3NTZWxlY3RvcjogJ2dvb2dsZS1wYXktYnV0dG9uJyxcbiAgICBzb2Z0d2FyZUluZm9JZDogc29mdHdhcmVJZCxcbiAgICBzb2Z0d2FyZUluZm9WZXJzaW9uOiBzb2Z0d2FyZVZlcnNpb24sXG4gIH0pO1xuXG4gIEBJbnB1dCgpIHBheW1lbnRSZXF1ZXN0ITogZ29vZ2xlLnBheW1lbnRzLmFwaS5QYXltZW50RGF0YVJlcXVlc3Q7XG4gIEBJbnB1dCgpIGVudmlyb25tZW50ITogZ29vZ2xlLnBheW1lbnRzLmFwaS5FbnZpcm9ubWVudDtcbiAgQElucHV0KCkgZXhpc3RpbmdQYXltZW50TWV0aG9kUmVxdWlyZWQhOiBib29sZWFuO1xuICBASW5wdXQoKSBidXR0b25Db2xvcj86IGdvb2dsZS5wYXltZW50cy5hcGkuQnV0dG9uQ29sb3I7XG4gIEBJbnB1dCgpIGJ1dHRvblR5cGU/OiBnb29nbGUucGF5bWVudHMuYXBpLkJ1dHRvblR5cGU7XG4gIEBJbnB1dCgpIGJ1dHRvblJhZGl1cz86IG51bWJlcjtcbiAgQElucHV0KCkgYnV0dG9uU2l6ZU1vZGU/OiBnb29nbGUucGF5bWVudHMuYXBpLkJ1dHRvblNpemVNb2RlO1xuICBASW5wdXQoKSBidXR0b25Mb2NhbGU/OiBzdHJpbmc7XG4gIEBJbnB1dCgpIHBheW1lbnREYXRhQ2hhbmdlZENhbGxiYWNrPzogZ29vZ2xlLnBheW1lbnRzLmFwaS5QYXltZW50RGF0YUNoYW5nZWRIYW5kbGVyO1xuICBASW5wdXQoKSBwYXltZW50QXV0aG9yaXplZENhbGxiYWNrPzogZ29vZ2xlLnBheW1lbnRzLmFwaS5QYXltZW50QXV0aG9yaXplZEhhbmRsZXI7XG4gIEBJbnB1dCgpIHJlYWR5VG9QYXlDaGFuZ2VDYWxsYmFjaz86IChyZXN1bHQ6IGFueSkgPT4gdm9pZDtcbiAgQElucHV0KCkgbG9hZFBheW1lbnREYXRhQ2FsbGJhY2s/OiAocGF5bWVudERhdGE6IGdvb2dsZS5wYXltZW50cy5hcGkuUGF5bWVudERhdGEpID0+IHZvaWQ7XG4gIEBJbnB1dCgpIGNhbmNlbENhbGxiYWNrPzogKHJlYXNvbjogZ29vZ2xlLnBheW1lbnRzLmFwaS5QYXltZW50c0Vycm9yKSA9PiB2b2lkO1xuICBASW5wdXQoKSBlcnJvckNhbGxiYWNrPzogKGVycm9yOiBFcnJvciB8IGdvb2dsZS5wYXltZW50cy5hcGkuUGF5bWVudHNFcnJvcikgPT4gdm9pZDtcbiAgQElucHV0KCkgY2xpY2tDYWxsYmFjaz86IChldmVudDogRXZlbnQpID0+IHZvaWQ7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7fVxuXG4gIGdldCBpc1JlYWR5VG9QYXkoKTogYm9vbGVhbiB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMubWFuYWdlci5pc1JlYWR5VG9QYXk7XG4gIH1cblxuICBuZ09uSW5pdCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy5tYW5hZ2VyLm1vdW50KHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50KTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLmluaXRpYWxpemVCdXR0b24oKTtcbiAgfVxuXG4gIHByaXZhdGUgaW5pdGlhbGl6ZUJ1dHRvbiA9IGRlYm91bmNlKCgpID0+IHtcbiAgICBpZiAoIXRoaXMuYXNzZXJ0UmVxdWlyZWRQcm9wZXJ0eSgncGF5bWVudFJlcXVlc3QnKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5hc3NlcnRSZXF1aXJlZFByb3BlcnR5KCdlbnZpcm9ubWVudCcpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgY29uZmlnOiBDb25maWcgPSB7XG4gICAgICBwYXltZW50UmVxdWVzdDogdGhpcy5wYXltZW50UmVxdWVzdCxcbiAgICAgIGVudmlyb25tZW50OiB0aGlzLmVudmlyb25tZW50LFxuICAgICAgZXhpc3RpbmdQYXltZW50TWV0aG9kUmVxdWlyZWQ6IHRoaXMuZXhpc3RpbmdQYXltZW50TWV0aG9kUmVxdWlyZWQsXG4gICAgICBvblBheW1lbnREYXRhQ2hhbmdlZDogdGhpcy5wYXltZW50RGF0YUNoYW5nZWRDYWxsYmFjayxcbiAgICAgIG9uUGF5bWVudEF1dGhvcml6ZWQ6IHRoaXMucGF5bWVudEF1dGhvcml6ZWRDYWxsYmFjayxcbiAgICAgIGJ1dHRvbkNvbG9yOiB0aGlzLmJ1dHRvbkNvbG9yLFxuICAgICAgYnV0dG9uVHlwZTogdGhpcy5idXR0b25UeXBlLFxuICAgICAgYnV0dG9uUmFkaXVzOiB0aGlzLmJ1dHRvblJhZGl1cyxcbiAgICAgIGJ1dHRvblNpemVNb2RlOiB0aGlzLmJ1dHRvblNpemVNb2RlLFxuICAgICAgYnV0dG9uTG9jYWxlOiB0aGlzLmJ1dHRvbkxvY2FsZSxcbiAgICAgIG9uUmVhZHlUb1BheUNoYW5nZTogcmVzdWx0ID0+IHtcbiAgICAgICAgaWYgKHRoaXMucmVhZHlUb1BheUNoYW5nZUNhbGxiYWNrKSB7XG4gICAgICAgICAgdGhpcy5yZWFkeVRvUGF5Q2hhbmdlQ2FsbGJhY2socmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRpc3BhdGNoKCdyZWFkeXRvcGF5Y2hhbmdlJywgcmVzdWx0KTtcbiAgICAgIH0sXG4gICAgICBvbkNhbmNlbDogcmVhc29uID0+IHtcbiAgICAgICAgaWYgKHRoaXMuY2FuY2VsQ2FsbGJhY2spIHtcbiAgICAgICAgICB0aGlzLmNhbmNlbENhbGxiYWNrKHJlYXNvbik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kaXNwYXRjaCgnY2FuY2VsJywgcmVhc29uKTtcbiAgICAgIH0sXG4gICAgICBvbkVycm9yOiBlcnJvciA9PiB7XG4gICAgICAgIGlmICh0aGlzLmVycm9yQ2FsbGJhY2spIHtcbiAgICAgICAgICB0aGlzLmVycm9yQ2FsbGJhY2s/LihlcnJvcik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgRXJyb3JFdmVudCgnZXJyb3InLCB7IGVycm9yIH0pKTtcbiAgICAgIH0sXG4gICAgICBvbkxvYWRQYXltZW50RGF0YTogcGF5bWVudERhdGEgPT4ge1xuICAgICAgICBpZiAodGhpcy5sb2FkUGF5bWVudERhdGFDYWxsYmFjaykge1xuICAgICAgICAgIHRoaXMubG9hZFBheW1lbnREYXRhQ2FsbGJhY2socGF5bWVudERhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGlzcGF0Y2goJ2xvYWRwYXltZW50ZGF0YScsIHBheW1lbnREYXRhKTtcbiAgICAgIH0sXG4gICAgICBvbkNsaWNrOiBldmVudCA9PiB7XG4gICAgICAgIGlmICh0aGlzLmNsaWNrQ2FsbGJhY2spIHtcbiAgICAgICAgICB0aGlzLmNsaWNrQ2FsbGJhY2s/LihldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfTtcblxuICAgIHRoaXMubWFuYWdlci5jb25maWd1cmUoY29uZmlnKTtcbiAgfSk7XG5cbiAgcHJpdmF0ZSBhc3NlcnRSZXF1aXJlZFByb3BlcnR5KG5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHZhbHVlID0gKHRoaXMgYXMgYW55KVtuYW1lXTtcbiAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy50aHJvd0Vycm9yKEVycm9yKGBSZXF1aXJlZCBwcm9wZXJ0eSBub3Qgc2V0OiAke25hbWV9YCkpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFRocm93cyBhbiBlcnJvci5cbiAgICpcbiAgICogVXNlZCBmb3IgdGVzdGluZyBwdXJwb3NlcyBzbyB0aGF0IHRoZSBtZXRob2QgY2FuIGJlIHNwaWVkIG9uLlxuICAgKi9cbiAgcHJpdmF0ZSB0aHJvd0Vycm9yKGVycm9yOiBFcnJvcik6IG5ldmVyIHtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxuXG4gIHByaXZhdGUgZGlzcGF0Y2g8VD4odHlwZTogc3RyaW5nLCBkZXRhaWw6IFQpOiB2b2lkIHtcbiAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5kaXNwYXRjaEV2ZW50KFxuICAgICAgbmV3IEN1c3RvbUV2ZW50KHR5cGUsIHtcbiAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgY2FuY2VsYWJsZTogZmFsc2UsXG4gICAgICAgIGRldGFpbCxcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cbn1cbiJdfQ==