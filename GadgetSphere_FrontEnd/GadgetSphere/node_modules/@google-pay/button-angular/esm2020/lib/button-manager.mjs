/**
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* eslint-disable react/no-is-mounted */
import { loadScript } from '../lib/load-script';
/**
 * Manages the lifecycle of the Google Pay button.
 *
 * Includes lifecycle management of the `PaymentsClient` instance,
 * `isReadyToPay`, `onClick`, `loadPaymentData`, and other callback methods.
 */
export class ButtonManager {
    constructor(options) {
        /**
         * Handles the click event of the Google Pay button.
         *
         * This method would normally be private but has been made public for
         * testing purposes.
         *
         * @private
         */
        this.handleClick = async (event) => {
            const config = this.config;
            if (!config) {
                throw new Error('google-pay-button: Missing configuration');
            }
            const request = this.createLoadPaymentDataRequest(config);
            try {
                if (config.onClick) {
                    config.onClick(event);
                }
                if (event.defaultPrevented) {
                    return;
                }
                const result = await this.client.loadPaymentData(request);
                if (config.onLoadPaymentData) {
                    config.onLoadPaymentData(result);
                }
            }
            catch (err) {
                if (err.statusCode === 'CANCELED') {
                    if (config.onCancel) {
                        config.onCancel(err);
                    }
                }
                else if (config.onError) {
                    config.onError(err);
                }
                else {
                    console.error(err);
                }
            }
        };
        this.options = options;
    }
    getElement() {
        return this.element;
    }
    isGooglePayLoaded() {
        return 'google' in (window || global) && !!google?.payments?.api?.PaymentsClient;
    }
    async mount(element) {
        if (!this.isGooglePayLoaded()) {
            try {
                await loadScript('https://pay.google.com/gp/p/js/pay.js');
            }
            catch (err) {
                if (this.config?.onError) {
                    this.config.onError(err);
                }
                else {
                    console.error(err);
                }
                return;
            }
        }
        this.element = element;
        if (element) {
            this.appendStyles();
            if (this.config) {
                this.updateElement();
            }
        }
    }
    unmount() {
        this.element = undefined;
    }
    configure(newConfig) {
        let promise = undefined;
        this.config = newConfig;
        if (!this.oldInvalidationValues || this.isClientInvalidated(newConfig)) {
            promise = this.updateElement();
        }
        this.oldInvalidationValues = this.getInvalidationValues(newConfig);
        return promise ?? Promise.resolve();
    }
    /**
     * Creates client configuration options based on button configuration
     * options.
     *
     * This method would normally be private but has been made public for
     * testing purposes.
     *
     * @private
     */
    createClientOptions(config) {
        const clientConfig = {
            environment: config.environment,
            merchantInfo: this.createMerchantInfo(config),
        };
        if (config.onPaymentDataChanged || config.onPaymentAuthorized) {
            clientConfig.paymentDataCallbacks = {};
            if (config.onPaymentDataChanged) {
                // eslint-disable-next-line @typescript-eslint/explicit-function-return-type
                clientConfig.paymentDataCallbacks.onPaymentDataChanged = paymentData => {
                    const result = config.onPaymentDataChanged(paymentData);
                    return result || {};
                };
            }
            if (config.onPaymentAuthorized) {
                // eslint-disable-next-line @typescript-eslint/explicit-function-return-type
                clientConfig.paymentDataCallbacks.onPaymentAuthorized = paymentData => {
                    const result = config.onPaymentAuthorized(paymentData);
                    return result || {};
                };
            }
        }
        return clientConfig;
    }
    createIsReadyToPayRequest(config) {
        const paymentRequest = config.paymentRequest;
        const request = {
            apiVersion: paymentRequest.apiVersion,
            apiVersionMinor: paymentRequest.apiVersionMinor,
            allowedPaymentMethods: paymentRequest.allowedPaymentMethods,
            existingPaymentMethodRequired: config.existingPaymentMethodRequired,
        };
        return request;
    }
    /**
     * Constructs `loadPaymentData` request object based on button configuration.
     *
     * It infers request properties like `shippingAddressRequired`,
     * `shippingOptionRequired`, and `billingAddressRequired` if not already set
     * based on the presence of their associated options and parameters. It also
     * infers `callbackIntents` based on the callback methods defined in button
     * configuration.
     *
     * This method would normally be private but has been made public for
     * testing purposes.
     *
     * @private
     */
    createLoadPaymentDataRequest(config) {
        const request = {
            ...config.paymentRequest,
            merchantInfo: this.createMerchantInfo(config),
        };
        // TODO: #13 re-enable inferrence if/when we agree as a team
        return request;
    }
    createMerchantInfo(config) {
        const merchantInfo = {
            ...config.paymentRequest.merchantInfo,
        };
        // apply softwareInfo if not set
        if (!merchantInfo.softwareInfo) {
            merchantInfo.softwareInfo = {
                id: this.options.softwareInfoId,
                version: this.options.softwareInfoVersion,
            };
        }
        return merchantInfo;
    }
    isMounted() {
        return this.element != null && this.element.isConnected !== false;
    }
    removeButton() {
        if (this.element instanceof ShadowRoot || this.element instanceof Element) {
            for (const child of Array.from(this.element.children)) {
                if (child.tagName !== 'STYLE') {
                    child.remove();
                }
            }
        }
    }
    async updateElement() {
        if (!this.isMounted())
            return;
        const element = this.getElement();
        if (!this.config) {
            throw new Error('google-pay-button: Missing configuration');
        }
        // remove existing button
        this.removeButton();
        try {
            this.client = new google.payments.api.PaymentsClient(this.createClientOptions(this.config));
        }
        catch (err) {
            if (this.config.onError) {
                this.config.onError(err);
            }
            else {
                console.error(err);
            }
            return;
        }
        const buttonOptions = {
            buttonType: this.config.buttonType,
            buttonColor: this.config.buttonColor,
            buttonRadius: this.config.buttonRadius,
            buttonSizeMode: this.config.buttonSizeMode,
            buttonLocale: this.config.buttonLocale,
            onClick: this.handleClick,
            allowedPaymentMethods: this.config.paymentRequest.allowedPaymentMethods,
        };
        const rootNode = element.getRootNode();
        if (rootNode instanceof ShadowRoot) {
            buttonOptions.buttonRootNode = rootNode;
        }
        // pre-create button
        const button = this.client.createButton(buttonOptions);
        this.setClassName(element, [element.className, 'not-ready']);
        element.appendChild(button);
        let showButton = false;
        let readyToPay;
        try {
            readyToPay = await this.client.isReadyToPay(this.createIsReadyToPayRequest(this.config));
            showButton =
                (readyToPay.result && !this.config.existingPaymentMethodRequired)
                    || (readyToPay.result && readyToPay.paymentMethodPresent && this.config.existingPaymentMethodRequired)
                    || false;
        }
        catch (err) {
            if (this.config.onError) {
                this.config.onError(err);
            }
            else {
                console.error(err);
            }
        }
        if (!this.isMounted())
            return;
        if (showButton) {
            try {
                this.client.prefetchPaymentData(this.createLoadPaymentDataRequest(this.config));
            }
            catch (err) {
                console.log('Error with prefetch', err);
            }
            // remove hidden className
            this.setClassName(element, (element.className || '').split(' ').filter(className => className && className !== 'not-ready'));
        }
        if (this.isReadyToPay !== readyToPay?.result || this.paymentMethodPresent !== readyToPay?.paymentMethodPresent) {
            this.isReadyToPay = !!readyToPay?.result;
            this.paymentMethodPresent = readyToPay?.paymentMethodPresent;
            if (this.config.onReadyToPayChange) {
                const readyToPayResponse = {
                    isButtonVisible: showButton,
                    isReadyToPay: this.isReadyToPay,
                };
                if (this.paymentMethodPresent) {
                    readyToPayResponse.paymentMethodPresent = this.paymentMethodPresent;
                }
                this.config.onReadyToPayChange(readyToPayResponse);
            }
        }
    }
    setClassName(element, classNames) {
        const className = classNames.filter(name => name).join(' ');
        if (className) {
            element.className = className;
        }
        else {
            element.removeAttribute('class');
        }
    }
    appendStyles() {
        if (typeof document === 'undefined')
            return;
        const rootNode = this.element?.getRootNode();
        const styleId = `default-google-style-${this.options.cssSelector.replace(/[^\w-]+/g, '')}-${this.config?.buttonLocale}`;
        // initialize styles if rendering on the client:
        if (rootNode) {
            if (!rootNode.getElementById?.(styleId)) {
                const style = document.createElement('style');
                style.id = styleId;
                style.type = 'text/css';
                style.innerHTML = `
          ${this.options.cssSelector} {
            display: inline-block;
          }
          ${this.options.cssSelector}.not-ready {
            width: 0;
            height: 0;
            overflow: hidden;
          }
        `;
                if (rootNode instanceof Document && rootNode.head) {
                    rootNode.head.appendChild(style);
                }
                else {
                    rootNode.appendChild(style);
                }
            }
        }
    }
    isClientInvalidated(newConfig) {
        if (!this.oldInvalidationValues)
            return true;
        const newValues = this.getInvalidationValues(newConfig);
        return newValues.some((value, index) => JSON.stringify(value) !== JSON.stringify(this.oldInvalidationValues[index]));
    }
    getInvalidationValues(config) {
        return [
            config.environment,
            config.existingPaymentMethodRequired,
            !!config.onPaymentDataChanged,
            !!config.onPaymentAuthorized,
            config.buttonType,
            config.buttonColor,
            config.buttonRadius,
            config.buttonLocale,
            config.buttonSizeMode,
            config.paymentRequest.merchantInfo.merchantId,
            config.paymentRequest.merchantInfo.merchantName,
            config.paymentRequest.merchantInfo.softwareInfo?.id,
            config.paymentRequest.merchantInfo.softwareInfo?.version,
            config.paymentRequest.allowedPaymentMethods,
        ];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLW1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9saWIvYnV0dG9uLW1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7O0dBY0c7QUFFSCx3Q0FBd0M7QUFFeEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBZ0NoRDs7Ozs7R0FLRztBQUNILE1BQU0sT0FBTyxhQUFhO0lBVXhCLFlBQVksT0FBNkI7UUEwUHpDOzs7Ozs7O1dBT0c7UUFDSCxnQkFBVyxHQUFHLEtBQUssRUFBRSxLQUFZLEVBQWlCLEVBQUU7WUFDbEQsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUMzQixJQUFJLENBQUMsTUFBTSxFQUFFO2dCQUNYLE1BQU0sSUFBSSxLQUFLLENBQUMsMENBQTBDLENBQUMsQ0FBQzthQUM3RDtZQUVELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUUxRCxJQUFJO2dCQUNGLElBQUksTUFBTSxDQUFDLE9BQU8sRUFBRTtvQkFDbEIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztpQkFDdkI7Z0JBRUQsSUFBSSxLQUFLLENBQUMsZ0JBQWdCLEVBQUU7b0JBQzFCLE9BQU87aUJBQ1I7Z0JBRUQsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTyxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFFM0QsSUFBSSxNQUFNLENBQUMsaUJBQWlCLEVBQUU7b0JBQzVCLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztpQkFDbEM7YUFDRjtZQUFDLE9BQU8sR0FBRyxFQUFFO2dCQUNaLElBQUssR0FBeUMsQ0FBQyxVQUFVLEtBQUssVUFBVSxFQUFFO29CQUN4RSxJQUFJLE1BQU0sQ0FBQyxRQUFRLEVBQUU7d0JBQ25CLE1BQU0s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Q3BDLENBQUMsQ0FBQyxNQUFNLENBQUMsb0JBQW9CO1lBQzdCLENBQUMsQ0FBQyxNQUFNLENBQUMsbUJBQW1CO1lBQzVCLE1BQU0sQ0FBQyxVQUFVO1lBQ2pCLE1BQU0sQ0FBQyxXQUFXO1lBQ2xCLE1BQU0sQ0FBQyxZQUFZO1lBQ25CLE1BQU0sQ0FBQyxZQUFZO1lBQ25CLE1BQU0sQ0FBQyxjQUFjO1lBQ3JCLE1BQU0sQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLFVBQVU7WUFDN0MsTUFBTSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsWUFBWTtZQUMvQyxNQUFNLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUUsRUFBRTtZQUNuRCxNQUFNLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUUsT0FBTztZQUN4RCxNQUFNLENBQUMsY0FBYyxDQUFDLHFCQUFxQjtTQUM1QyxDQUFDO0lBQ0osQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9uby1pcy1tb3VudGVkICovXG5cbmltcG9ydCB7IGxvYWRTY3JpcHQgfSBmcm9tICcuLi9saWIvbG9hZC1zY3JpcHQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlYWR5VG9QYXlDaGFuZ2VSZXNwb25zZSB7XG4gIGlzQnV0dG9uVmlzaWJsZTogYm9vbGVhbjtcbiAgaXNSZWFkeVRvUGF5OiBib29sZWFuO1xuICBwYXltZW50TWV0aG9kUHJlc2VudD86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29uZmlnIHtcbiAgZW52aXJvbm1lbnQ6IGdvb2dsZS5wYXltZW50cy5hcGkuRW52aXJvbm1lbnQ7XG4gIGV4aXN0aW5nUGF5bWVudE1ldGhvZFJlcXVpcmVkPzogYm9vbGVhbjtcbiAgcGF5bWVudFJlcXVlc3Q6IGdvb2dsZS5wYXltZW50cy5hcGkuUGF5bWVudERhdGFSZXF1ZXN0O1xuICBvblBheW1lbnREYXRhQ2hhbmdlZD86IGdvb2dsZS5wYXltZW50cy5hcGkuUGF5bWVudERhdGFDaGFuZ2VkSGFuZGxlcjtcbiAgb25QYXltZW50QXV0aG9yaXplZD86IGdvb2dsZS5wYXltZW50cy5hcGkuUGF5bWVudEF1dGhvcml6ZWRIYW5kbGVyO1xuICBvbkxvYWRQYXltZW50RGF0YT86IChwYXltZW50RGF0YTogZ29vZ2xlLnBheW1lbnRzLmFwaS5QYXltZW50RGF0YSkgPT4gdm9pZDtcbiAgb25DYW5jZWw/OiAocmVhc29uOiBnb29nbGUucGF5bWVudHMuYXBpLlBheW1lbnRzRXJyb3IpID0+IHZvaWQ7XG4gIG9uRXJyb3I/OiAoZXJyb3I6IEVycm9yIHwgZ29vZ2xlLnBheW1lbnRzLmFwaS5QYXltZW50c0Vycm9yKSA9PiB2b2lkO1xuICBvblJlYWR5VG9QYXlDaGFuZ2U/OiAocmVzdWx0OiBSZWFkeVRvUGF5Q2hhbmdlUmVzcG9uc2UpID0+IHZvaWQ7XG4gIG9uQ2xpY2s/OiAoZXZlbnQ6IEV2ZW50KSA9PiB2b2lkO1xuICBidXR0b25UeXBlPzogZ29vZ2xlLnBheW1lbnRzLmFwaS5CdXR0b25UeXBlO1xuICBidXR0b25Db2xvcj86IGdvb2dsZS5wYXltZW50cy5hcGkuQnV0dG9uQ29sb3I7XG4gIGJ1dHRvblJhZGl1cz86IG51bWJlcjtcbiAgYnV0dG9uU2l6ZU1vZGU/OiBnb29nbGUucGF5bWVudHMuYXBpLkJ1dHRvblNpemVNb2RlO1xuICBidXR0b25Mb2NhbGU/OiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBCdXR0b25NYW5hZ2VyT3B0aW9ucyB7XG4gIGNzc1NlbGVjdG9yOiBzdHJpbmc7XG4gIHNvZnR3YXJlSW5mb0lkOiBzdHJpbmc7XG4gIHNvZnR3YXJlSW5mb1ZlcnNpb246IHN0cmluZztcbn1cblxuLyoqXG4gKiBNYW5hZ2VzIHRoZSBsaWZlY3ljbGUgb2YgdGhlIEdvb2dsZSBQYXkgYnV0dG9uLlxuICpcbiAqIEluY2x1ZGVzIGxpZmVjeWNsZSBtYW5hZ2VtZW50IG9mIHRoZSBgUGF5bWVudHNDbGllbnRgIGluc3RhbmNlLFxuICogYGlzUmVhZHlUb1BheWAsIGBvbkNsaWNrYCwgYGxvYWRQYXltZW50RGF0YWAsIGFuZCBvdGhlciBjYWxsYmFjayBtZXRob2RzLlxuICovXG5leHBvcnQgY2xhc3MgQnV0dG9uTWFuYWdlciB7XG4gIHByaXZhdGUgY2xpZW50PzogZ29vZ2xlLnBheW1lbnRzLmFwaS5QYXltZW50c0NsaWVudDtcbiAgcHJpdmF0ZSBjb25maWc/OiBDb25maWc7XG4gIHByaXZhdGUgZWxlbWVudD86IEVsZW1lbnQ7XG4gIHByaXZhdGUgb3B0aW9uczogQnV0dG9uTWFuYWdlck9wdGlvbnM7XG4gIHByaXZhdGUgb2xkSW52YWxpZGF0aW9uVmFsdWVzPzogYW55W107XG5cbiAgaXNSZWFkeVRvUGF5PzogYm9vbGVhbjtcbiAgcGF5bWVudE1ldGhvZFByZXNlbnQ/OiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnM6IEJ1dHRvbk1hbmFnZXJPcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuXG4gIGdldEVsZW1lbnQoKTogRWxlbWVudCB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudDtcbiAgfVxuXG4gIHByaXZhdGUgaXNHb29nbGVQYXlMb2FkZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICdnb29nbGUnIGluICh3aW5kb3cgfHwgZ2xvYmFsKSAmJiAhIWdvb2dsZT8ucGF5bWVudHM/LmFwaT8uUGF5bWVudHNDbGllbnQ7XG4gIH1cblxuICBhc3luYyBtb3VudChlbGVtZW50OiBFbGVtZW50KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKCF0aGlzLmlzR29vZ2xlUGF5TG9hZGVkKCkpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGxvYWRTY3JpcHQoJ2h0dHBzOi8vcGF5Lmdvb2dsZS5jb20vZ3AvcC9qcy9wYXkuanMnKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBpZiAodGhpcy5jb25maWc/Lm9uRXJyb3IpIHtcbiAgICAgICAgICB0aGlzLmNvbmZpZy5vbkVycm9yKGVyciBhcyBFcnJvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgIGlmIChlbGVtZW50KSB7XG4gICAgICB0aGlzLmFwcGVuZFN0eWxlcygpO1xuICAgICAgaWYgKHRoaXMuY29uZmlnKSB7XG4gICAgICAgIHRoaXMudXBkYXRlRWxlbWVudCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHVubW91bnQoKTogdm9pZCB7XG4gICAgdGhpcy5lbGVtZW50ID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgY29uZmlndXJlKG5ld0NvbmZpZzogQ29uZmlnKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgbGV0IHByb21pc2U6IFByb21pc2U8dm9pZD4gfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5jb25maWcgPSBuZXdDb25maWc7XG4gICAgaWYgKCF0aGlzLm9sZEludmFsaWRhdGlvblZhbHVlcyB8fCB0aGlzLmlzQ2xpZW50SW52YWxpZGF0ZWQobmV3Q29uZmlnKSkge1xuICAgICAgcHJvbWlzZSA9IHRoaXMudXBkYXRlRWxlbWVudCgpO1xuICAgIH1cbiAgICB0aGlzLm9sZEludmFsaWRhdGlvblZhbHVlcyA9IHRoaXMuZ2V0SW52YWxpZGF0aW9uVmFsdWVzKG5ld0NvbmZpZyk7XG5cbiAgICByZXR1cm4gcHJvbWlzZSA/PyBQcm9taXNlLnJlc29sdmUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGNsaWVudCBjb25maWd1cmF0aW9uIG9wdGlvbnMgYmFzZWQgb24gYnV0dG9uIGNvbmZpZ3VyYXRpb25cbiAgICogb3B0aW9ucy5cbiAgICpcbiAgICogVGhpcyBtZXRob2Qgd291bGQgbm9ybWFsbHkgYmUgcHJpdmF0ZSBidXQgaGFzIGJlZW4gbWFkZSBwdWJsaWMgZm9yXG4gICAqIHRlc3RpbmcgcHVycG9zZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjcmVhdGVDbGllbnRPcHRpb25zKGNvbmZpZzogQ29uZmlnKTogZ29vZ2xlLnBheW1lbnRzLmFwaS5QYXltZW50T3B0aW9ucyB7XG4gICAgY29uc3QgY2xpZW50Q29uZmlnOiBnb29nbGUucGF5bWVudHMuYXBpLlBheW1lbnRPcHRpb25zID0ge1xuICAgICAgZW52aXJvbm1lbnQ6IGNvbmZpZy5lbnZpcm9ubWVudCxcbiAgICAgIG1lcmNoYW50SW5mbzogdGhpcy5jcmVhdGVNZXJjaGFudEluZm8oY29uZmlnKSxcbiAgICB9O1xuXG4gICAgaWYgKGNvbmZpZy5vblBheW1lbnREYXRhQ2hhbmdlZCB8fCBjb25maWcub25QYXltZW50QXV0aG9yaXplZCkge1xuICAgICAgY2xpZW50Q29uZmlnLnBheW1lbnREYXRhQ2FsbGJhY2tzID0ge307XG5cbiAgICAgIGlmIChjb25maWcub25QYXltZW50RGF0YUNoYW5nZWQpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1mdW5jdGlvbi1yZXR1cm4tdHlwZVxuICAgICAgICBjbGllbnRDb25maWcucGF5bWVudERhdGFDYWxsYmFja3Mub25QYXltZW50RGF0YUNoYW5nZWQgPSBwYXltZW50RGF0YSA9PiB7XG4gICAgICAgICAgY29uc3QgcmVzdWx0ID0gY29uZmlnLm9uUGF5bWVudERhdGFDaGFuZ2VkIShwYXltZW50RGF0YSk7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdCB8fCAoe30gYXMgZ29vZ2xlLnBheW1lbnRzLmFwaS5QYXltZW50RGF0YVJlcXVlc3RVcGRhdGUpO1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAoY29uZmlnLm9uUGF5bWVudEF1dGhvcml6ZWQpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1mdW5jdGlvbi1yZXR1cm4tdHlwZVxuICAgICAgICBjbGllbnRDb25maWcucGF5bWVudERhdGFDYWxsYmFja3Mub25QYXltZW50QXV0aG9yaXplZCA9IHBheW1lbnREYXRhID0+IHtcbiAgICAgICAgICBjb25zdCByZXN1bHQgPSBjb25maWcub25QYXltZW50QXV0aG9yaXplZCEocGF5bWVudERhdGEpO1xuICAgICAgICAgIHJldHVybiByZXN1bHQgfHwgKHt9IGFzIGdvb2dsZS5wYXltZW50cy5hcGkuUGF5bWVudEF1dGhvcml6YXRpb25SZXN1bHQpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjbGllbnRDb25maWc7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZUlzUmVhZHlUb1BheVJlcXVlc3QoY29uZmlnOiBDb25maWcpOiBnb29nbGUucGF5bWVudHMuYXBpLklzUmVhZHlUb1BheVJlcXVlc3Qge1xuICAgIGNvbnN0IHBheW1lbnRSZXF1ZXN0ID0gY29uZmlnLnBheW1lbnRSZXF1ZXN0O1xuICAgIGNvbnN0IHJlcXVlc3Q6IGdvb2dsZS5wYXltZW50cy5hcGkuSXNSZWFkeVRvUGF5UmVxdWVzdCA9IHtcbiAgICAgIGFwaVZlcnNpb246IHBheW1lbnRSZXF1ZXN0LmFwaVZlcnNpb24sXG4gICAgICBhcGlWZXJzaW9uTWlub3I6IHBheW1lbnRSZXF1ZXN0LmFwaVZlcnNpb25NaW5vcixcbiAgICAgIGFsbG93ZWRQYXltZW50TWV0aG9kczogcGF5bWVudFJlcXVlc3QuYWxsb3dlZFBheW1lbnRNZXRob2RzLFxuICAgICAgZXhpc3RpbmdQYXltZW50TWV0aG9kUmVxdWlyZWQ6IGNvbmZpZy5leGlzdGluZ1BheW1lbnRNZXRob2RSZXF1aXJlZCxcbiAgICB9O1xuXG4gICAgcmV0dXJuIHJlcXVlc3Q7XG4gIH1cblxuICAvKipcbiAgICogQ29uc3RydWN0cyBgbG9hZFBheW1lbnREYXRhYCByZXF1ZXN0IG9iamVjdCBiYXNlZCBvbiBidXR0b24gY29uZmlndXJhdGlvbi5cbiAgICpcbiAgICogSXQgaW5mZXJzIHJlcXVlc3QgcHJvcGVydGllcyBsaWtlIGBzaGlwcGluZ0FkZHJlc3NSZXF1aXJlZGAsXG4gICAqIGBzaGlwcGluZ09wdGlvblJlcXVpcmVkYCwgYW5kIGBiaWxsaW5nQWRkcmVzc1JlcXVpcmVkYCBpZiBub3QgYWxyZWFkeSBzZXRcbiAgICogYmFzZWQgb24gdGhlIHByZXNlbmNlIG9mIHRoZWlyIGFzc29jaWF0ZWQgb3B0aW9ucyBhbmQgcGFyYW1ldGVycy4gSXQgYWxzb1xuICAgKiBpbmZlcnMgYGNhbGxiYWNrSW50ZW50c2AgYmFzZWQgb24gdGhlIGNhbGxiYWNrIG1ldGhvZHMgZGVmaW5lZCBpbiBidXR0b25cbiAgICogY29uZmlndXJhdGlvbi5cbiAgICpcbiAgICogVGhpcyBtZXRob2Qgd291bGQgbm9ybWFsbHkgYmUgcHJpdmF0ZSBidXQgaGFzIGJlZW4gbWFkZSBwdWJsaWMgZm9yXG4gICAqIHRlc3RpbmcgcHVycG9zZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjcmVhdGVMb2FkUGF5bWVudERhdGFSZXF1ZXN0KGNvbmZpZzogQ29uZmlnKTogZ29vZ2xlLnBheW1lbnRzLmFwaS5QYXltZW50RGF0YVJlcXVlc3Qge1xuICAgIGNvbnN0IHJlcXVlc3QgPSB7XG4gICAgICAuLi5jb25maWcucGF5bWVudFJlcXVlc3QsXG4gICAgICBtZXJjaGFudEluZm86IHRoaXMuY3JlYXRlTWVyY2hhbnRJbmZvKGNvbmZpZyksXG4gICAgfTtcblxuICAgIC8vIFRPRE86ICMxMyByZS1lbmFibGUgaW5mZXJyZW5jZSBpZi93aGVuIHdlIGFncmVlIGFzIGEgdGVhbVxuXG4gICAgcmV0dXJuIHJlcXVlc3Q7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZU1lcmNoYW50SW5mbyhjb25maWc6IENvbmZpZyk6IGdvb2dsZS5wYXltZW50cy5hcGkuTWVyY2hhbnRJbmZvIHtcbiAgICBjb25zdCBtZXJjaGFudEluZm86IGdvb2dsZS5wYXltZW50cy5hcGkuTWVyY2hhbnRJbmZvID0ge1xuICAgICAgLi4uY29uZmlnLnBheW1lbnRSZXF1ZXN0Lm1lcmNoYW50SW5mbyxcbiAgICB9O1xuXG4gICAgLy8gYXBwbHkgc29mdHdhcmVJbmZvIGlmIG5vdCBzZXRcbiAgICBpZiAoIW1lcmNoYW50SW5mby5zb2Z0d2FyZUluZm8pIHtcbiAgICAgIG1lcmNoYW50SW5mby5zb2Z0d2FyZUluZm8gPSB7XG4gICAgICAgIGlkOiB0aGlzLm9wdGlvbnMuc29mdHdhcmVJbmZvSWQsXG4gICAgICAgIHZlcnNpb246IHRoaXMub3B0aW9ucy5zb2Z0d2FyZUluZm9WZXJzaW9uLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVyY2hhbnRJbmZvO1xuICB9XG5cbiAgcHJpdmF0ZSBpc01vdW50ZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudCAhPSBudWxsICYmIHRoaXMuZWxlbWVudC5pc0Nvbm5lY3RlZCAhPT0gZmFsc2U7XG4gIH1cblxuICBwcml2YXRlIHJlbW92ZUJ1dHRvbigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5lbGVtZW50IGluc3RhbmNlb2YgU2hhZG93Um9vdCB8fCB0aGlzLmVsZW1lbnQgaW5zdGFuY2VvZiBFbGVtZW50KSB7XG4gICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIEFycmF5LmZyb20odGhpcy5lbGVtZW50LmNoaWxkcmVuKSkge1xuICAgICAgICBpZiAoY2hpbGQudGFnTmFtZSAhPT0gJ1NUWUxFJykge1xuICAgICAgICAgIGNoaWxkLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyB1cGRhdGVFbGVtZW50KCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICghdGhpcy5pc01vdW50ZWQoKSkgcmV0dXJuO1xuICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLmdldEVsZW1lbnQoKSE7XG5cbiAgICBpZiAoIXRoaXMuY29uZmlnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2dvb2dsZS1wYXktYnV0dG9uOiBNaXNzaW5nIGNvbmZpZ3VyYXRpb24nKTtcbiAgICB9XG5cbiAgICAvLyByZW1vdmUgZXhpc3RpbmcgYnV0dG9uXG4gICAgdGhpcy5yZW1vdmVCdXR0b24oKTtcblxuICAgIHRyeSB7XG4gICAgICB0aGlzLmNsaWVudCA9IG5ldyBnb29nbGUucGF5bWVudHMuYXBpLlBheW1lbnRzQ2xpZW50KHRoaXMuY3JlYXRlQ2xpZW50T3B0aW9ucyh0aGlzLmNvbmZpZykpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKHRoaXMuY29uZmlnLm9uRXJyb3IpIHtcbiAgICAgICAgdGhpcy5jb25maWcub25FcnJvcihlcnIgYXMgRXJyb3IpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGJ1dHRvbk9wdGlvbnM6IGdvb2dsZS5wYXltZW50cy5hcGkuQnV0dG9uT3B0aW9ucyA9IHtcbiAgICAgIGJ1dHRvblR5cGU6IHRoaXMuY29uZmlnLmJ1dHRvblR5cGUsXG4gICAgICBidXR0b25Db2xvcjogdGhpcy5jb25maWcuYnV0dG9uQ29sb3IsXG4gICAgICBidXR0b25SYWRpdXM6IHRoaXMuY29uZmlnLmJ1dHRvblJhZGl1cyxcbiAgICAgIGJ1dHRvblNpemVNb2RlOiB0aGlzLmNvbmZpZy5idXR0b25TaXplTW9kZSxcbiAgICAgIGJ1dHRvbkxvY2FsZTogdGhpcy5jb25maWcuYnV0dG9uTG9jYWxlLFxuICAgICAgb25DbGljazogdGhpcy5oYW5kbGVDbGljayxcbiAgICAgIGFsbG93ZWRQYXltZW50TWV0aG9kczogdGhpcy5jb25maWcucGF5bWVudFJlcXVlc3QuYWxsb3dlZFBheW1lbnRNZXRob2RzLFxuICAgIH07XG5cbiAgICBjb25zdCByb290Tm9kZSA9IGVsZW1lbnQuZ2V0Um9vdE5vZGUoKTtcbiAgICBpZiAocm9vdE5vZGUgaW5zdGFuY2VvZiBTaGFkb3dSb290KSB7XG4gICAgICBidXR0b25PcHRpb25zLmJ1dHRvblJvb3ROb2RlID0gcm9vdE5vZGU7XG4gICAgfVxuXG4gICAgLy8gcHJlLWNyZWF0ZSBidXR0b25cbiAgICBjb25zdCBidXR0b24gPSB0aGlzLmNsaWVudC5jcmVhdGVCdXR0b24oYnV0dG9uT3B0aW9ucyk7XG5cbiAgICB0aGlzLnNldENsYXNzTmFtZShlbGVtZW50LCBbZWxlbWVudC5jbGFzc05hbWUsICdub3QtcmVhZHknXSk7XG4gICAgZWxlbWVudC5hcHBlbmRDaGlsZChidXR0b24pO1xuXG4gICAgbGV0IHNob3dCdXR0b24gPSBmYWxzZTtcbiAgICBsZXQgcmVhZHlUb1BheTogZ29vZ2xlLnBheW1lbnRzLmFwaS5Jc1JlYWR5VG9QYXlSZXNwb25zZSB8IHVuZGVmaW5lZDtcblxuICAgIHRyeSB7XG4gICAgICByZWFkeVRvUGF5ID0gYXdhaXQgdGhpcy5jbGllbnQuaXNSZWFkeVRvUGF5KHRoaXMuY3JlYXRlSXNSZWFkeVRvUGF5UmVxdWVzdCh0aGlzLmNvbmZpZykpO1xuICAgICAgc2hvd0J1dHRvbiA9XG4gICAgICAgIChyZWFkeVRvUGF5LnJlc3VsdCAmJiAhdGhpcy5jb25maWcuZXhpc3RpbmdQYXltZW50TWV0aG9kUmVxdWlyZWQpXG4gICAgICAgIHx8IChyZWFkeVRvUGF5LnJlc3VsdCAmJiByZWFkeVRvUGF5LnBheW1lbnRNZXRob2RQcmVzZW50ICYmIHRoaXMuY29uZmlnLmV4aXN0aW5nUGF5bWVudE1ldGhvZFJlcXVpcmVkKVxuICAgICAgICB8fCBmYWxzZTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGlmICh0aGlzLmNvbmZpZy5vbkVycm9yKSB7XG4gICAgICAgIHRoaXMuY29uZmlnLm9uRXJyb3IoZXJyIGFzIEVycm9yKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuaXNNb3VudGVkKCkpIHJldHVybjtcblxuICAgIGlmIChzaG93QnV0dG9uKSB7XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLmNsaWVudC5wcmVmZXRjaFBheW1lbnREYXRhKHRoaXMuY3JlYXRlTG9hZFBheW1lbnREYXRhUmVxdWVzdCh0aGlzLmNvbmZpZykpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdFcnJvciB3aXRoIHByZWZldGNoJywgZXJyKTtcbiAgICAgIH1cblxuICAgICAgLy8gcmVtb3ZlIGhpZGRlbiBjbGFzc05hbWVcbiAgICAgIHRoaXMuc2V0Q2xhc3NOYW1lKFxuICAgICAgICBlbGVtZW50LFxuICAgICAgICAoZWxlbWVudC5jbGFzc05hbWUgfHwgJycpLnNwbGl0KCcgJykuZmlsdGVyKGNsYXNzTmFtZSA9PiBjbGFzc05hbWUgJiYgY2xhc3NOYW1lICE9PSAnbm90LXJlYWR5JyksXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmlzUmVhZHlUb1BheSAhPT0gcmVhZHlUb1BheT8ucmVzdWx0IHx8IHRoaXMucGF5bWVudE1ldGhvZFByZXNlbnQgIT09IHJlYWR5VG9QYXk/LnBheW1lbnRNZXRob2RQcmVzZW50KSB7XG4gICAgICB0aGlzLmlzUmVhZHlUb1BheSA9ICEhcmVhZHlUb1BheT8ucmVzdWx0O1xuICAgICAgdGhpcy5wYXltZW50TWV0aG9kUHJlc2VudCA9IHJlYWR5VG9QYXk/LnBheW1lbnRNZXRob2RQcmVzZW50O1xuXG4gICAgICBpZiAodGhpcy5jb25maWcub25SZWFkeVRvUGF5Q2hhbmdlKSB7XG4gICAgICAgIGNvbnN0IHJlYWR5VG9QYXlSZXNwb25zZTogUmVhZHlUb1BheUNoYW5nZVJlc3BvbnNlID0ge1xuICAgICAgICAgIGlzQnV0dG9uVmlzaWJsZTogc2hvd0J1dHRvbixcbiAgICAgICAgICBpc1JlYWR5VG9QYXk6IHRoaXMuaXNSZWFkeVRvUGF5LFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh0aGlzLnBheW1lbnRNZXRob2RQcmVzZW50KSB7XG4gICAgICAgICAgcmVhZHlUb1BheVJlc3BvbnNlLnBheW1lbnRNZXRob2RQcmVzZW50ID0gdGhpcy5wYXltZW50TWV0aG9kUHJlc2VudDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY29uZmlnLm9uUmVhZHlUb1BheUNoYW5nZShyZWFkeVRvUGF5UmVzcG9uc2UpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIHRoZSBjbGljayBldmVudCBvZiB0aGUgR29vZ2xlIFBheSBidXR0b24uXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHdvdWxkIG5vcm1hbGx5IGJlIHByaXZhdGUgYnV0IGhhcyBiZWVuIG1hZGUgcHVibGljIGZvclxuICAgKiB0ZXN0aW5nIHB1cnBvc2VzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaGFuZGxlQ2xpY2sgPSBhc3luYyAoZXZlbnQ6IEV2ZW50KTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgY29uc3QgY29uZmlnID0gdGhpcy5jb25maWc7XG4gICAgaWYgKCFjb25maWcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignZ29vZ2xlLXBheS1idXR0b246IE1pc3NpbmcgY29uZmlndXJhdGlvbicpO1xuICAgIH1cblxuICAgIGNvbnN0IHJlcXVlc3QgPSB0aGlzLmNyZWF0ZUxvYWRQYXltZW50RGF0YVJlcXVlc3QoY29uZmlnKTtcblxuICAgIHRyeSB7XG4gICAgICBpZiAoY29uZmlnLm9uQ2xpY2spIHtcbiAgICAgICAgY29uZmlnLm9uQ2xpY2soZXZlbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuY2xpZW50IS5sb2FkUGF5bWVudERhdGEocmVxdWVzdCk7XG5cbiAgICAgIGlmIChjb25maWcub25Mb2FkUGF5bWVudERhdGEpIHtcbiAgICAgICAgY29uZmlnLm9uTG9hZFBheW1lbnREYXRhKHJlc3VsdCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBpZiAoKGVyciBhcyBnb29nbGUucGF5bWVudHMuYXBpLlBheW1lbnRzRXJyb3IpLnN0YXR1c0NvZGUgPT09ICdDQU5DRUxFRCcpIHtcbiAgICAgICAgaWYgKGNvbmZpZy5vbkNhbmNlbCkge1xuICAgICAgICAgIGNvbmZpZy5vbkNhbmNlbChlcnIgYXMgZ29vZ2xlLnBheW1lbnRzLmFwaS5QYXltZW50c0Vycm9yKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjb25maWcub25FcnJvcikge1xuICAgICAgICBjb25maWcub25FcnJvcihlcnIgYXMgZ29vZ2xlLnBheW1lbnRzLmFwaS5QYXltZW50c0Vycm9yKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcHJpdmF0ZSBzZXRDbGFzc05hbWUoZWxlbWVudDogRWxlbWVudCwgY2xhc3NOYW1lczogc3RyaW5nW10pOiB2b2lkIHtcbiAgICBjb25zdCBjbGFzc05hbWUgPSBjbGFzc05hbWVzLmZpbHRlcihuYW1lID0+IG5hbWUpLmpvaW4oJyAnKTtcbiAgICBpZiAoY2xhc3NOYW1lKSB7XG4gICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2NsYXNzJyk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhcHBlbmRTdHlsZXMoKTogdm9pZCB7XG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjtcblxuICAgIGNvbnN0IHJvb3ROb2RlID0gdGhpcy5lbGVtZW50Py5nZXRSb290Tm9kZSgpIGFzIERvY3VtZW50IHwgU2hhZG93Um9vdCB8IHVuZGVmaW5lZDtcbiAgICBjb25zdCBzdHlsZUlkID0gYGRlZmF1bHQtZ29vZ2xlLXN0eWxlLSR7dGhpcy5vcHRpb25zLmNzc1NlbGVjdG9yLnJlcGxhY2UoL1teXFx3LV0rL2csICcnKX0tJHtcbiAgICAgIHRoaXMuY29uZmlnPy5idXR0b25Mb2NhbGVcbiAgICB9YDtcblxuICAgIC8vIGluaXRpYWxpemUgc3R5bGVzIGlmIHJlbmRlcmluZyBvbiB0aGUgY2xpZW50OlxuICAgIGlmIChyb290Tm9kZSkge1xuICAgICAgaWYgKCFyb290Tm9kZS5nZXRFbGVtZW50QnlJZD8uKHN0eWxlSWQpKSB7XG4gICAgICAgIGNvbnN0IHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICAgICAgc3R5bGUuaWQgPSBzdHlsZUlkO1xuICAgICAgICBzdHlsZS50eXBlID0gJ3RleHQvY3NzJztcbiAgICAgICAgc3R5bGUuaW5uZXJIVE1MID0gYFxuICAgICAgICAgICR7dGhpcy5vcHRpb25zLmNzc1NlbGVjdG9yfSB7XG4gICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgfVxuICAgICAgICAgICR7dGhpcy5vcHRpb25zLmNzc1NlbGVjdG9yfS5ub3QtcmVhZHkge1xuICAgICAgICAgICAgd2lkdGg6IDA7XG4gICAgICAgICAgICBoZWlnaHQ6IDA7XG4gICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICAgIH1cbiAgICAgICAgYDtcblxuICAgICAgICBpZiAocm9vdE5vZGUgaW5zdGFuY2VvZiBEb2N1bWVudCAmJiByb290Tm9kZS5oZWFkKSB7XG4gICAgICAgICAgcm9vdE5vZGUuaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcm9vdE5vZGUuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBpc0NsaWVudEludmFsaWRhdGVkKG5ld0NvbmZpZzogQ29uZmlnKTogYm9vbGVhbiB7XG4gICAgaWYgKCF0aGlzLm9sZEludmFsaWRhdGlvblZhbHVlcykgcmV0dXJuIHRydWU7XG5cbiAgICBjb25zdCBuZXdWYWx1ZXMgPSB0aGlzLmdldEludmFsaWRhdGlvblZhbHVlcyhuZXdDb25maWcpO1xuICAgIHJldHVybiBuZXdWYWx1ZXMuc29tZShcbiAgICAgICh2YWx1ZSwgaW5kZXgpID0+IEpTT04uc3RyaW5naWZ5KHZhbHVlKSAhPT0gSlNPTi5zdHJpbmdpZnkodGhpcy5vbGRJbnZhbGlkYXRpb25WYWx1ZXMhW2luZGV4XSksXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0SW52YWxpZGF0aW9uVmFsdWVzKGNvbmZpZzogQ29uZmlnKTogYW55W10ge1xuICAgIHJldHVybiBbXG4gICAgICBjb25maWcuZW52aXJvbm1lbnQsXG4gICAgICBjb25maWcuZXhpc3RpbmdQYXltZW50TWV0aG9kUmVxdWlyZWQsXG4gICAgICAhIWNvbmZpZy5vblBheW1lbnREYXRhQ2hhbmdlZCxcbiAgICAgICEhY29uZmlnLm9uUGF5bWVudEF1dGhvcml6ZWQsXG4gICAgICBjb25maWcuYnV0dG9uVHlwZSxcbiAgICAgIGNvbmZpZy5idXR0b25Db2xvcixcbiAgICAgIGNvbmZpZy5idXR0b25SYWRpdXMsXG4gICAgICBjb25maWcuYnV0dG9uTG9jYWxlLFxuICAgICAgY29uZmlnLmJ1dHRvblNpemVNb2RlLFxuICAgICAgY29uZmlnLnBheW1lbnRSZXF1ZXN0Lm1lcmNoYW50SW5mby5tZXJjaGFudElkLFxuICAgICAgY29uZmlnLnBheW1lbnRSZXF1ZXN0Lm1lcmNoYW50SW5mby5tZXJjaGFudE5hbWUsXG4gICAgICBjb25maWcucGF5bWVudFJlcXVlc3QubWVyY2hhbnRJbmZvLnNvZnR3YXJlSW5mbz8uaWQsXG4gICAgICBjb25maWcucGF5bWVudFJlcXVlc3QubWVyY2hhbnRJbmZvLnNvZnR3YXJlSW5mbz8udmVyc2lvbixcbiAgICAgIGNvbmZpZy5wYXltZW50UmVxdWVzdC5hbGxvd2VkUGF5bWVudE1ldGhvZHMsXG4gICAgXTtcbiAgfVxufVxuIl19